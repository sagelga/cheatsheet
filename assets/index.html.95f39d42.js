import{_ as e,o as t,c as n,e as s}from"../app.b199fa92.mjs";const a={},o=s(`<h1 id="with" tabindex="-1"><a class="header-anchor" href="#with" aria-hidden="true">#</a> with</h1><p>with statement is used to wrap the execution of a block of code within methods defined by the context manager.</p><p>Context manager is a class that implements <code>__enter__</code> and <code>__exit__</code> methods. Use of with statement ensures that the <code>__exit__</code> method is called at the end of the nested block. This concept is similar to the use of try\u2026finally block. Here, is an example.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> my_file<span class="token punctuation">:</span>
    my_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This example writes the text Hello world! to the file example.txt. File objects have <code>__enter__</code> and <code>__exit__</code> method defined within them, so they act as their own context manager.</p><p>First the <code>__enter__</code> method is called, then the code within with statement is executed and finally the <code>__exit__</code> method is called. <code>__exit__</code> method is called even if there is an error. It basically closes the file stream.</p>`,6),i=[o];function c(d,l){return t(),n("div",null,i)}const h=e(a,[["render",c],["__file","index.html.vue"]]);export{h as default};
