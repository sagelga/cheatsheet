import{_ as n,o as a,c as s,e}from"../app.b199fa92.mjs";const t={},i=e(`<h1 id="inner-join" tabindex="-1"><a class="header-anchor" href="#inner-join" aria-hidden="true">#</a> Inner Join</h1><p>Inner join - returns only rows that matched using key/attribute.</p><h2 id="join-with-on-clause" tabindex="-1"><a class="header-anchor" href="#join-with-on-clause" aria-hidden="true">#</a> Join with <code>ON</code> clause</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">JOIN</span> table2
  <span class="token keyword">ON</span> <span class="token punctuation">(</span>tablee1<span class="token punctuation">.</span>column_name <span class="token operator">=</span> table2<span class="token punctuation">.</span>column_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-three-way-joins-with-on-clause" tabindex="-1"><a class="header-anchor" href="#creating-three-way-joins-with-on-clause" aria-hidden="true">#</a> Creating Three-way joins with ON clause</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> city<span class="token punctuation">,</span> department_name
<span class="token keyword">FROM</span> employees e
<span class="token keyword">JOIN</span> departments d
  <span class="token keyword">ON</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">)</span>
  <span class="token keyword">JOIN</span> locations l
<span class="token keyword">ON</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>location_id <span class="token operator">=</span> l<span class="token punctuation">.</span>location_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="specified-table-using-on-clause" tabindex="-1"><a class="header-anchor" href="#specified-table-using-on-clause" aria-hidden="true">#</a> Specified table using ON clause</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>attribute1<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> employees e
<span class="token keyword">JOIN</span> employees m
<span class="token keyword">ON</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>id <span class="token operator">=</span> m<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To join other attribute in same table (recursive relationship)</p><p>To combine the table,</p><ul><li>n-1 JOIN statement is required to join n table(s) <ul><li>For example : 3 table join requires 2 JOIN statement</li></ul></li></ul>`,11),o=[i];function l(c,p){return a(),s("div",null,o)}const r=n(t,[["render",l],["__file","index.html.vue"]]);export{r as default};
