import{_ as n,o as s,c as a,e}from"../app.b199fa92.mjs";const t={},i=e(`<h1 id="file-manipulation" tabindex="-1"><a class="header-anchor" href="#file-manipulation" aria-hidden="true">#</a> File Manipulation</h1><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>file_variable <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;file_name.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>

file_variable<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>

file_variable<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Program need to close the file. Because when you write something, it keeps it in buffer, not the actual file. By closing it, the Python script will save the buffer (write) to the according file</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>file1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r+w&quot;</span><span class="token punctuation">)</span>
file2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r+w&quot;</span><span class="token punctuation">)</span>

file1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
file2<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>

file1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The file <code>file2</code> will not be saved. Because the file is not closed. Thus the program is not saved.</p><h3 id="another-way-to-write-file" tabindex="-1"><a class="header-anchor" href="#another-way-to-write-file" aria-hidden="true">#</a> Another way to write file</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;file_name.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_variable<span class="token punctuation">:</span>
    file_variale<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>By using <code>with</code> and <code>as</code> keyword, this script will automaticaly close the program</p>`,8),o=[i];function p(l,c){return s(),a("div",null,o)}const r=n(t,[["render",p],["__file","index.html.vue"]]);export{r as default};
