import{_ as n,o as e,c as s,e as a}from"../app.b199fa92.mjs";const t={},i=a(`<h1 id="except-raise-try" tabindex="-1"><a class="header-anchor" href="#except-raise-try" aria-hidden="true">#</a> except, raise, try</h1><p>except, raise, try are used with exceptions in Python.</p><p>Exceptions are basically errors that suggests something went wrong while executing our program. IOError, ValueError, ZeroDivisionError, ImportError, NameError, TypeError etc. are few examples of exception in Python. try...except blocks are used to catch exceptions in Python.</p><p>We can raise an exception explicitly with the raise keyword. Following is an example:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">reciprocal</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        r <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>num
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Exception caught&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token keyword">return</span> r

<span class="token keyword">print</span><span class="token punctuation">(</span>reciprocal<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>reciprocal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Output

0.1
Exception caught
None
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the function reciprocal() returns the reciprocal of the input number.</p><p>When we enter 10, we get the normal output of 0.1. But when we input 0, a ZeroDivisionError is raised automatically.</p><p>This is caught by our try\u2026except block and we return None. We could have also raised the ZeroDivisionError explicitly by checking the input and handled it elsewhere as follows:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ZeroDivisionError<span class="token punctuation">(</span><span class="token string">&#39;cannot divide&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,10),r=[i];function o(p,c){return e(),s("div",null,r)}const u=n(t,[["render",o],["__file","index.html.vue"]]);export{u as default};
