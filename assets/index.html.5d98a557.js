import{_ as s,o as a,c as e,e as n}from"../app.b199fa92.mjs";const t={},l=n(`<h1 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> WHERE</h1><p>\u0E40\u0E1E\u0E23\u0E32\u0E30\u0E14\u0E49\u0E27\u0E22\u0E27\u0E48\u0E32 SELECT \u0E19\u0E31\u0E49\u0E19\u0E08\u0E30\u0E40\u0E1B\u0E47\u0E19\u0E01\u0E32\u0E23\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E17\u0E38\u0E01 row \u0E2D\u0E2D\u0E01\u0E21\u0E32 \u0E41\u0E15\u0E48\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E17\u0E35\u0E48\u0E08\u0E30\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E41\u0E04\u0E48\u0E1A\u0E32\u0E07 row \u0E2D\u0E2D\u0E01\u0E21\u0E32\u0E19\u0E31\u0E49\u0E19 \u0E40\u0E23\u0E32\u0E08\u0E30\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E0A\u0E49 WHERE \u0E42\u0E14\u0E22\u0E1C\u0E25\u0E25\u0E31\u0E1E\u0E17\u0E4C\u0E17\u0E35\u0E48\u0E08\u0E30\u0E2D\u0E2D\u0E01\u0E21\u0E32\u0E19\u0E31\u0E49\u0E19\u0E01\u0E47\u0E04\u0E37\u0E2D\u0E40\u0E21\u0E37\u0E48\u0E2D WHERE \u0E02\u0E2D\u0E07\u0E43\u0E19 row \u0E19\u0E31\u0E49\u0E19\u0E40\u0E1B\u0E47\u0E19\u0E08\u0E23\u0E34\u0E07\u0E40\u0E17\u0E48\u0E32\u0E19\u0E31\u0E49\u0E19</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span>argument<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><h3 id="example-one" tabindex="-1"><a class="header-anchor" href="#example-one" aria-hidden="true">#</a> Example One</h3><p>If you liked to find the employee that have <code>first_name</code> equals to &#39;Jeff&#39;, this is how you write it.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">=</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-two" tabindex="-1"><a class="header-anchor" href="#example-two" aria-hidden="true">#</a> Example Two</h3><p>If you liked to lists all employees that have salary more than or equal to 2000</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-three" tabindex="-1"><a class="header-anchor" href="#example-three" aria-hidden="true">#</a> Example Three</h3><p>You can use <code>AND</code> or any arguments to join the clause.</p><p>In this example, select all the rows that have <code>first_name</code> of &#39;John&#39; and <code>last_name</code> of &#39;Cena&#39; and do not have <code>id</code> as 12.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name <span class="token keyword">FROM</span> employee
<span class="token keyword">WHERE</span> first_name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>
    <span class="token operator">AND</span> last_name <span class="token operator">=</span> <span class="token string">&#39;Cena&#39;</span>
    <span class="token operator">AND</span> <span class="token operator">NOT</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-wildcards-using-like" tabindex="-1"><a class="header-anchor" href="#using-wildcards-using-like" aria-hidden="true">#</a> Using wildcards using <code>LIKE</code></h2><p>The idea of like is like regular expressions in SQL.</p><ul><li><code>%</code> - represents a wild card for zero, one, or multiple characters</li><li><code>_</code> - represents a wild card for single character</li></ul><h3 id="example-one-1" tabindex="-1"><a class="header-anchor" href="#example-one-1" aria-hidden="true">#</a> Example One</h3><p>Wants to get all the employees that have the <strong>first name</strong> that <strong>starts with J</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">&#39;J%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-two-1" tabindex="-1"><a class="header-anchor" href="#example-two-1" aria-hidden="true">#</a> Example Two</h3><p>Wants to get the result in the column that the first name <strong>starts with \u2018J\u2019 and have 4 more alphabet after it</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">&#39;J____&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-three-1" tabindex="-1"><a class="header-anchor" href="#example-three-1" aria-hidden="true">#</a> Example Three</h3><p>Wants to get the result in the first name <strong>starts with \u2018J\u2019 and the third alphabet is \u2018h\u2019</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">&#39;J_h_&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-four" tabindex="-1"><a class="header-anchor" href="#example-four" aria-hidden="true">#</a> Example Four</h3><p>Wants to get the result in the first name <strong>starts with \u2018J\u2019 and ends with \u2018n\u2019</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">&#39;J%n&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-five" tabindex="-1"><a class="header-anchor" href="#example-five" aria-hidden="true">#</a> Example Five</h3><p>Wants to get the result that their <code>first_name</code> is <strong>at least 3 character long</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">&#39;___%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-in-keyword" tabindex="-1"><a class="header-anchor" href="#using-in-keyword" aria-hidden="true">#</a> Using <code>IN</code> keyword</h2><p><code>IN</code> keyword is similar result to match. But if one matched in a list, it is a matched and it will be shown in the result.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span>
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>multiple_values<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-one-2" tabindex="-1"><a class="header-anchor" href="#example-one-2" aria-hidden="true">#</a> Example One</h3><p>Result in the column that the <code>first_name</code> <strong>is either \u2018John\u2019 or \u2018Jeff\u2019</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> first_name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-between-keyword" tabindex="-1"><a class="header-anchor" href="#using-between-keyword" aria-hidden="true">#</a> Using <code>BETWEEN</code> keyword</h2><p>Equivalent to <code>[value1] &lt;= [column_name] &lt;= [value2]</code> in Math equation</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span>
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token operator">BETWEEN</span> <span class="token punctuation">[</span>value_1<span class="token punctuation">]</span> <span class="token operator">AND</span> <span class="token punctuation">[</span>value_2<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-one-3" tabindex="-1"><a class="header-anchor" href="#example-one-3" aria-hidden="true">#</a> Example One</h3><p>Show every <code>first_name</code> that salary is between 2000 and 5000</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> salary <span class="token operator">BETWEEN</span> <span class="token number">2000</span> <span class="token operator">AND</span> <span class="token number">5000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nested-where-arguments" tabindex="-1"><a class="header-anchor" href="#nested-where-arguments" aria-hidden="true">#</a> Nested WHERE arguments</h2><h3 id="where-the-cell-data-is-more-than-computed-cell" tabindex="-1"><a class="header-anchor" href="#where-the-cell-data-is-more-than-computed-cell" aria-hidden="true">#</a> Where the cell data is more than computed cell</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> salary
    <span class="token keyword">FROM</span> Employees
    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),i=[l];function o(r,p){return a(),e("div",null,i)}const c=s(t,[["render",o],["__file","index.html.vue"]]);export{c as default};
