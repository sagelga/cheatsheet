import{_ as d,o,c as p,a as i,d as a,w as s,e,b as t,r as l}from"../app.b199fa92.mjs";const c={},r=e(`<h1 id="create-table" tabindex="-1"><a class="header-anchor" href="#create-table" aria-hidden="true">#</a> CREATE table</h1><h2 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span> <span class="token punctuation">(</span>
<span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>data_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>column_constraint<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>data_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>column_constraint<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>data_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>column_constraint<span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>table_constraint<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),u=t("You can find more information about "),k=t("Data Types"),h=t(" and "),m=t("Constraints"),b=t(" in the following link."),y=e(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Create a table without determining a primary key is not a good idea.</p></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><h3 id="example-one" tabindex="-1"><a class="header-anchor" href="#example-one" aria-hidden="true">#</a> Example One</h3><p>Create a table <code>Employees</code> with following columns and data types</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>and the result will come out like this</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Margining the datatypes or constraints is not required by SQL compiler, but we do it for cleaner reading.</p></div><h2 id="create-primary-key-constraints" tabindex="-1"><a class="header-anchor" href="#create-primary-key-constraints" aria-hidden="true">#</a> Create <code>PRIMARY KEY</code> constraints</h2><h3 id="example-one-1" tabindex="-1"><a class="header-anchor" href="#example-one-1" aria-hidden="true">#</a> Example One</h3><p>Create a table <code>Employees</code> with following columns and data types.<br> This time, we choose <code>id</code> attribute as the table Primary Key.</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Table constraint name is not required to be in format. You will have to remember it to delete that constraint.</p></div><h3 id="example-two" tabindex="-1"><a class="header-anchor" href="#example-two" aria-hidden="true">#</a> Example Two</h3><p>Create a table <code>Employees</code> with following columns and data types.<br> This time, we choose <code>id</code> <strong>and</strong> <code>first_name</code> attribute as the table Primary Key (As a Composite Primary Key)</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id_first_name&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-foreign-key-constraints" tabindex="-1"><a class="header-anchor" href="#adding-foreign-key-constraints" aria-hidden="true">#</a> Adding <code>FOREIGN KEY</code> constraints</h2><p>Similar to Primary Key, but we have to point the Foreign Key to another table attribute.</p><h3 id="example-one-2" tabindex="-1"><a class="header-anchor" href="#example-one-2" aria-hidden="true">#</a> Example One</h3><p>Create a table <code>Employees</code> with following columns and data types.</p><p>This time, <code>workplace_id</code> attribute is created to let employees know that which <code>Workplace</code> are they in by connecting it to <code>id</code> attribute (<code>Workplace</code> mandatory one---optional many <code>Employees</code>)<br> But they requires another key (<code>id</code>) to identify each employee. Which generates composite key.</p><p>So this is how <code>Employees</code> table are designed.</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>workplace_id</td><td>INT(10)</td><td>\u2611\uFE0F with <code>id</code></td><td></td><td></td><td></td><td>\u2611\uFE0F</td><td>Expense(salary)</td></tr><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F with <code>workplace_id</code></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    workplace_id    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    id              <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name      <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id_first_name&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workplace_id<span class="token punctuation">)</span>
    <span class="token keyword">CONSTRAINT</span> <span class="token string">&#39;FK_workplace_id&#39;</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>workplace_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Workplace<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="foreign-key-additional-constraints" tabindex="-1"><a class="header-anchor" href="#foreign-key-additional-constraints" aria-hidden="true">#</a> Foreign Key additional constraints</h2><p>Foreign key might be delete easily, so you can put options on what to do when the record in other table is gone or update</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>You can choose <strong>only one</strong> option for each one. Choose wisely.</p></div><h3 id="on-delete" tabindex="-1"><a class="header-anchor" href="#on-delete" aria-hidden="true">#</a> ON DELETE</h3><p>When other table record is gone, what do the record in this table do?</p><table><thead><tr><th>Option</th><th>Syntax</th><th>Benefit</th></tr></thead><tbody><tr><td>No action</td><td><code>ON DELETE</code></td><td>Will not allow deletion on parent table</td></tr><tr><td>Cascade</td><td><code>ON DELETE CASCADE</code></td><td>Will delete the row to the same value as parent</td></tr><tr><td>Null</td><td><code>ON DELETE SET NULL</code></td><td>Will use null value instead</td></tr><tr><td>Default</td><td><code>ON DELETE SET DEFAULT</code></td><td>Will use default value instead</td></tr></tbody></table><p>By adding these constraints, the row will safely delete (able to delete normally). If not, the <strong>reference integrity will blocked you</strong> from deleting the row.</p><h3 id="on-update" tabindex="-1"><a class="header-anchor" href="#on-update" aria-hidden="true">#</a> ON UPDATE</h3><p>When other table record get updated, what do the record in this table do?</p><table><thead><tr><th>Option</th><th>Syntax</th><th>Benefit</th></tr></thead><tbody><tr><td>-</td><td><code>ON UPDATE</code></td><td>Will not allow update on parent table</td></tr><tr><td>Cascade</td><td><code>ON UPDATE CASCADE</code></td><td>Will update the row to the same value as parent</td></tr><tr><td>Null</td><td><code>ON DELETE SET NULL</code></td><td>Will use null value instead</td></tr><tr><td>Default</td><td><code>ON DELETE SET DEFAULT</code></td><td>Will use default value instead</td></tr></tbody></table><p>by adding these constraints, the row will delete safely (able to delete normally). If not, the reference integrity will blocked you from deleting the row.</p><h2 id="adding-not-null-constraints" tabindex="-1"><a class="header-anchor" href="#adding-not-null-constraints" aria-hidden="true">#</a> Adding <code>NOT NULL</code> constraints</h2><h3 id="example-one-3" tabindex="-1"><a class="header-anchor" href="#example-one-3" aria-hidden="true">#</a> Example One</h3><p>Create a table <code>Employees</code> with following columns and data types.<br> This time, we choose <code>id</code> attribute as the table Primary Key.</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td>\u2611\uFE0F</td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td>\u2611\uFE0F</td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-unique-constraints" tabindex="-1"><a class="header-anchor" href="#adding-unique-constraints" aria-hidden="true">#</a> Adding <code>UNIQUE</code> constraints</h2><p>Adding a unique constraint will force new entries to have different unique value. Primary key is unique as a default.</p><h3 id="example-one-4" tabindex="-1"><a class="header-anchor" href="#example-one-4" aria-hidden="true">#</a> Example One</h3><p>Create a table <code>Employees</code> with following columns and data types.<br> We choose <code>id</code> attribute as the table Primary Key.<br> and let the <code>first_name</code> attribute to be unique.</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td>\u2611\uFE0F</td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id_first_name&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-two-1" tabindex="-1"><a class="header-anchor" href="#example-two-1" aria-hidden="true">#</a> Example Two</h3><p>Create a table <code>Employees</code> with following columns and data types.<br> We choose <code>id</code> attribute as the table Primary Key.<br> and let the <code>first_name</code> <strong>and</strong> <code>last_name</code> attribute to be unique (as composite unique constraint).</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td>\u2611\uFE0F with <code>last_name</code></td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td>\u2611\uFE0F with <code>first_name</code></td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id_first_name&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-three" tabindex="-1"><a class="header-anchor" href="#example-three" aria-hidden="true">#</a> Example Three</h3><p>Create a table <code>Employees</code> with following columns and data types.<br> We choose <code>id</code> attribute as the table Primary Key.<br> and let the <code>first_name</code>, <code>last_name</code> attribute to be <strong>individually</strong> unique.</p><table><thead><tr><th>Name</th><th>Data Type</th><th>PK</th><th>AI</th><th>UQ</th><th>NN</th><th>FK</th><th>Ref. FK</th></tr></thead><tbody><tr><td>id</td><td>INT(10)</td><td>\u2611\uFE0F</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>first_name</td><td>VARCHAR(255)</td><td></td><td></td><td>\u2611\uFE0F</td><td></td><td></td><td></td></tr><tr><td>last_name</td><td>VARCHAR(255)</td><td></td><td></td><td>\u2611\uFE0F</td><td></td><td></td><td></td></tr><tr><td>salary</td><td>INT(10)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employees <span class="token punctuation">(</span>
    id          <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    first_name  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary      <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>last_name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token string">&#39;PK_Employees_id_first_name&#39;</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Composite unique and 2 individual unique are not the same.<br> Composite unique requires <code>first_name</code> <strong>and</strong> <code>last_name</code> to be the same to reject the input. As shown in comparison below.</p><table><thead><tr><th>Input<br>(as <code>first_name</code> and <code>last_name</code>)</th><th>2 Individual Unique Constraint</th><th>Composite Unique Constraint</th></tr></thead><tbody><tr><td><strong>Sam</strong> Smith, <strong>Sam</strong> Mercury, Jeff Sam</td><td>\u274C</td><td>\u2B55</td></tr><tr><td><strong>Sam Smith</strong>, <strong>Sam Smith</strong>, Sam Sam</td><td>\u274C</td><td>\u274C</td></tr><tr><td>Jeff <strong>Smith</strong>, Sam Mercury, Tom <strong>Smith</strong></td><td>\u274C</td><td>\u2B55</td></tr></tbody></table></div><h2 id="create-new-table-another-table" tabindex="-1"><a class="header-anchor" href="#create-new-table-another-table" aria-hidden="true">#</a> Create new table another table</h2><p>You can use the queries to create new table by using <code>as</code> to join the query together.</p><h3 id="example-one-5" tabindex="-1"><a class="header-anchor" href="#example-one-5" aria-hidden="true">#</a> Example One</h3><p>Create a new table <code>NewEmployees</code> from the query of <code>Employees</code> table.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> salary <span class="token operator">BETWEEN</span> <span class="token number">2000</span> <span class="token operator">AND</span> <span class="token number">5000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and the code will go as following</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> NewEmployees
<span class="token keyword">AS</span>  <span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary
    <span class="token keyword">FROM</span> Employees
    <span class="token keyword">WHERE</span> salary <span class="token operator">BETWEEN</span> <span class="token number">2000</span> <span class="token operator">AND</span> <span class="token number">5000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>As you can see, there is no need to set up the constraits. Some constraints are also copied from the reference table</p></div>`,65);function v(w,E){const n=l("RouterLink");return o(),p("div",null,[r,i("p",null,[u,a(n,{to:"/Overall/DataType/"},{default:s(()=>[k]),_:1}),h,a(n,{to:"/Overall/Table/"},{default:s(()=>[m]),_:1}),b]),y])}const g=d(c,[["render",v],["__file","index.html.vue"]]);export{g as default};
